{"version":3,"sources":["logo.svg","dog-components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DogContainer","props","isFav","onChangeFav","dog","Card","style","marginBottom","backgroundColor","textAlign","CardContent","src","imageUrl","maxWidth","Typography","variant","component","color","name","type","intro","CardActions","IconButton","aria-label","onClick","Dog","age","this","dogs","App","useState","favItems","setFavItems","useEffect","favouriteItems","JSON","parse","localStorage","getItem","className","map","i","key","findIndex","item","newFavItems","filter","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,mMC6C5BC,EAlCM,SAACC,GAAW,IACvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,YACTC,EAAMH,EAAMG,IAElB,OACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,aAAc,OACdC,gBAAiB,UACjBC,UAAW,SAGb,kBAACC,EAAA,EAAD,KACE,yBAAKC,IAAKP,EAAIQ,SAAUN,MAAO,CAAEO,SAAU,UAE3C,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,cACa,uBAAGV,MAAO,CAAEW,MAAO,QAAUb,EAAIc,OAE9C,kBAACJ,EAAA,EAAD,CAAYG,MAAM,iBAAlB,UAA0Cb,EAAIe,MAC9C,kBAACL,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACpC,gDACCZ,EAAIgB,QAGT,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,aAAW,MAAMC,QAASrB,GACnCD,GAAS,kBAAC,IAAD,CAAcI,MAAO,CAAEW,MAAO,UACtCf,GAAS,kBAAC,IAAD,UCjCfuB,EACJ,WAAYP,EAAMC,EAAMO,EAAKd,EAAUQ,GAAQ,oBAC7CO,KAAKT,KAAOA,EACZS,KAAKR,KAAOA,EACZQ,KAAKD,IAAMA,EACXC,KAAKf,SAAWA,EAChBe,KAAKP,MAAQA,GAuCXQ,EAAO,CApCE,IAAIH,EACjB,WACA,WACA,WACA,iEACA,sDAGa,IAAIA,EACjB,OACA,eACA,UACA,sEACA,8CAEe,IAAIA,EACnB,SACA,WACA,WACA,sEACA,0DAEc,IAAIA,EAClB,QACA,mBACA,WACA,4EACA,mDAEc,IAAIA,EAClB,SACA,gBACA,YACA,2EACA,oDAsCaI,MAjCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KASb,OANAC,qBAAU,SAAChC,GAET,IAAMiC,EAAiBC,KAAKC,MAAMC,aAAaC,QAP5B,mBAQfJ,GAAgBF,EAAYE,KAC/B,IAGD,yBAAKK,UAAU,OACb,yBAAKA,UAAU,oBACb,mDACCX,EAAKY,KAAI,SAACpC,EAAKqC,GAAN,OACR,kBAAC,EAAD,CACErC,IAAKA,EACLsC,IAAKD,EACLvC,MAAO6B,EAASY,WAAU,SAACC,GAAD,OAAUA,GAAQxC,EAAIc,SAAS,EACzDf,YAAa,WACX,IAAM0C,EACJd,EAASY,WAAU,SAACC,GAAD,OAAUA,GAAQxC,EAAIc,SAAS,EAC9Ca,EAASe,QAAO,SAACF,GAAD,OAAUA,IAASxC,EAAIc,QAD3C,sBAEQa,GAFR,CAEkB3B,EAAIc,OACxBmB,aAAaU,QAzBJ,iBAyB4BZ,KAAKa,UAAUH,IACpDb,EAAYa,YCjENI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be0b4d6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst DogContainer = (props) => {\r\n  const { isFav, onChangeFav } = props; //Destructring\r\n  const dog = props.dog;\r\n\r\n  return (\r\n    <Card\r\n      style={{\r\n        marginBottom: \"25px\",\r\n        backgroundColor: \"#FFEDF9\",\r\n        textAlign: \"left\",\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <img src={dog.imageUrl} style={{ maxWidth: \"100%\" }} />\r\n\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          My Name is <b style={{ color: \"red\" }}>{dog.name}</b>\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">Breed: {dog.type}</Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <b>Intro about me : </b>\r\n          {dog.intro}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <IconButton aria-label=\"fav\" onClick={onChangeFav}>\r\n          {isFav && <FavoriteIcon style={{ color: \"red\" }} />}\r\n          {!isFav && <FavoriteBorderIcon />}\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DogContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport DogContainer from \"./dog-components\";\r\n\r\nclass Dog {\r\n  constructor(name, type, age, imageUrl, intro) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.age = age;\r\n    this.imageUrl = imageUrl;\r\n    this.intro = intro;\r\n  }\r\n}\r\nconst dogOne = new Dog(\r\n  \"Casifier\",\r\n  \"Pull Dog\",\r\n  \"6 months\",\r\n  \"http://cdn.akc.org/content/article-body-image/pugsmalldogs.jpg\",\r\n  \"Super active type. Love chicken wings and carrots.\"\r\n);\r\n\r\nconst dogTwo = new Dog(\r\n  \"Howl\",\r\n  \"Havanese Dog\",\r\n  \"2 years\",\r\n  \"http://cdn.akc.org/content/article-body-image/havanesesmalldogs.jpg\",\r\n  \"love to play in sunlight. scare of height.\"\r\n);\r\nconst dogThree = new Dog(\r\n  \"Sophie\",\r\n  \"Papillon\",\r\n  \"4 months\",\r\n  \"http://cdn.akc.org/content/article-body-image/papillonsmalldogs.jpg\",\r\n  \"Love beach and swimming pool. love brocoli and banana.\"\r\n);\r\nconst dogFour = new Dog(\r\n  \"Snowy\",\r\n  \"Cavking Charless\",\r\n  \"9 months\",\r\n  \"http://cdn.akc.org/content/article-body-image/cavkingcharlessmalldogs.jpg\",\r\n  \"Love Steak and bacon. love to play with buddies\"\r\n);\r\nconst dogFive = new Dog(\r\n  \"Jackie\",\r\n  \"Bostonterrier\",\r\n  \"11 months\",\r\n  \"http://cdn.akc.org/content/article-body-image/bostonterriersmalldogs.jpg\",\r\n  \"Love Steak and bacon. love to play with buddies\"\r\n);\r\nconst dogs = [dogOne, dogTwo, dogThree, dogFour, dogFive];\r\nconst FAVOURITE_DOGS = \"favourite-dogs\";\r\n\r\nfunction App() {\r\n  const [favItems, setFavItems] = useState([]);\r\n\r\n  useEffect((props) => {\r\n    // first time running\r\n    const favouriteItems = JSON.parse(localStorage.getItem(FAVOURITE_DOGS));\r\n    if (favouriteItems) setFavItems(favouriteItems);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container-center\">\r\n        <h1>Cute Dogs are here!</h1>\r\n        {dogs.map((dog, i) => (\r\n          <DogContainer\r\n            dog={dog}\r\n            key={i}\r\n            isFav={favItems.findIndex((item) => item == dog.name) >= 0} //default false\r\n            onChangeFav={() => {\r\n              const newFavItems =\r\n                favItems.findIndex((item) => item == dog.name) >= 0\r\n                  ? favItems.filter((item) => item !== dog.name)\r\n                  : [...favItems, dog.name];\r\n              localStorage.setItem(FAVOURITE_DOGS, JSON.stringify(newFavItems));\r\n              setFavItems(newFavItems);\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}